//1-c


void Inverter(TPilha *Pilha){
    if(!Vazia(*Pilha)){
        TProduto x,y;
        TPilha P2;
        FPVazia(&P2);
        int i = 0;
        int j = 1;
        int n = GetTamanho(*Pilha);
        while(j<=(n-1)){
            i=0;
            Desempilhar(Pilha,&y);
            while(i<(n-j)){
                Desempilhar(Pilha,&x);
                Empilhar(x,&P2);
                i++;
            }
            Empilhar(y,Pilha);
            while(!Vazia(P2)){
                Desempilhar(&P2,&x);
                Empilhar(x,Pilha);
            }
            j++;
        }
        free(P2.topo);
    }
}






// 1a
void Inverter(TPilha *Pilha){
    if(!Vazia(*Pilha)){
        TPilha P1,P2;
        FPVazia(&P1);
        FPVazia(&P2);
        TProduto x;
        while(!Vazia(*Pilha)){

            Desempilhar(Pilha,&x);
            Empilhar(x,&P1);

        }
        while(!Vazia(P1)){

            Desempilhar(&P1,&x);
            Empilhar(x,&P2);

        }
        while(!Vazia(P2)){

            Desempilhar(&P2,&x);
            Empilhar(x,Pilha);

        }
        free(P1.topo);
        free(P2.topo);
    }
}


//1b
void Inverter2(TPilha *Pilha){
    if(!Vazia(*Pilha)){
        TFila F1;
        TProduto x;
        while(!Vazia(*Pilha)){
            Desempilhar(Pilha,&x);
            Enfileirar(x,&F1);
        }
        while(!Vazia(F1)){
            Desenfileirar(&F1,&x);
            Empilhar(x,Pilha);
        }
        free(F1.frente);
    }
}


//1c - UTILIZANDO UMA PILHA AUXILIAR E UMA FILA

void Inverter3(TPilha *Pilha){
    if(!Vazia(*Pilha)){
        TPilha P1;
        FPVazia(&P1);
        TFila F1;
        FFVazia(&F1);
        TProduto x;
        while(!Vazia(*Pilha)){
            Desempilhar(Pilha,&x);
            Empilhar(x,&P1);
        }
        while(!Vazia(P1)){
            Desempilhar(&P1,&x);
            Enfileirar(x,&F1);
        }
        while(!Vazia1(F1)){
            Desenfileirar(&F1,&x);
            Empilhar(x,&P1);
        }
        while(!Vazia(P1)){
            Desempilhar(&P1,&x);
            Empilhar(x,Pilha);
        }
        free(P1.topo);
        free(F1.frente);
    }
}

1-c //UTILIZANDO SOMENTE UMA PILHA AUXILIAR

void Inverte3 (TPilha *Pilha1) {
    int n = Tamanho(*Pilha1);
    TPilha Pilha2;
    FPVazia(&Pilha2);
    TProduto Aux;
    TProduto x;
    int i = 0;
    while(n != 0) {
        while(i < n-1) { // Vai desempilhar(tirar) somente n-1 um termos de Pilha1, e ira empilhar esse n-1 termos em Pilha2
            Desempilhar(Pilha1, &x);
            Empilhar(&Pilha2, x);
            i++;
        }
        Pop(Pilha1, &Aux); // O ultimo termo que sobrou em Pilha1 vai ser desempilhado de Pilha1 e Aux ira receber seu valor
        i = 0;
        while(i < n-1) { // Vai desempilhar(tirar) n-1 termos de Pilha2, sendo n-1 o tamanho da Pilha2, logo esta desempilhando todos os termos de Pilha2, 
        // e ira empilhar eles em Pilha1
            Desempilhar(&Pilha2, &x);
            Empilhar(Pilha1, x);
            i++;
        }
        Empilhar(&Pilha2, Aux); // Empilhando Aux em Pilha2
        n--;
        i = 0;
    }
    // Ao final desse laço Pilha2 ira ser igual a Pilha1
    // Com isso iremos ter que inverter
    while(!Vazia(Pilha2)) { //Desempilhando Pilha2 e Empilhando em Pilha1, logo, fazendo a Pilha1 receber o inverso da pilha
        Desempilhar(&Pilha2, &x);
        Empilhar(Pilha1, x);
    }
}


//2 - UTILIZANDO DUAS FILAS AUXILIARES

void Transfere(TPilha *Pilha1, TPilha *Pilha2){
    TFila F1, F2;
    FFVazia(&F1);
    FFVazia(&F2);
    TProduto x;
    while(!Vazia(*Pilha1)){
        Desempilhar(Pilha1,&x);
        Enfileirar(x,&F1); // Enfileirando os termos da Pilha1
    }
    while(!VaziaFila(F1)){
        Desenfileirar(&F1,&x); 
        Empilhar(x,Pilha1); // Empilhando os termos na ordem inversa de Pilha1 inicial em Pilha1
    }
    while(!Vazia(*Pilha1)){ 
        Desempilhar(Pilha1,&x); 
        Empilhar(x,Pilha2); // Empilhando os termos na ordem de Pilha1 inicial em Pilha2
        Enfileirar(x,&F2); // Enfileirando os termos inversos em F2
    }
    while(!VaziaFila(F2)){
        Desenfileirar(&F2,&x); 
        Empilhar(x,Pilha1); // Empilhando os termos na ordem de Pilha1 inicial em Pilha1
    }
    free(F1.frente); //Liberando as Filas
    free(F2.frente); 
}


//2 - UTILIZANDO SOMENTE UMA PILHA AUXILIAR

void Transfere(TPilha *Pilha1, TPilha *Pilha2){
    int n = Tamanho(*Pilha1);
    TProduto Aux;
    TProduto x;
    int i = 0;
    while(n != 0) {
        while(i < n-1) { // Vai desempilhar(tirar) somente n-1 um termos de Pilha1, e ira empilhar esse n-1 termos em Pilha2
            Desempilhar(Pilha1, &x);
            Empilhar(Pilha2, x);
            i++;
        }
        Pop(Pilha1, &Aux); // O ultimo termo que sobrou em Pilha1 vai ser desempilhado de Pilha1 e Aux ira receber seu valor
        i = 0;
        while(i < n-1) { // Vai desempilhar(tirar) n-1 termos de Pilha2, sendo n-1 o tamanho da Pilha2, logo esta desempilhando todos os termos de Pilha2, 
        // e ira empilhar eles em Pilha1
            Desempilhar(Pilha2, &x);
            Empilhar(Pilha1, x);
            i++;
        }
        Empilhar(Pilha2, Aux); // Empilhando Aux em Pilha2
        n--;
        i = 0;
    }
    // Ao final desse laço Pilha2 ira ser igual a Pilha1
}



//3

typedef struct{
    char *nome;
} TCaracteres;

typedef struct celula1{
    char Item;
    struct celula1* prox;
} TCelulaCaracter;

typedef struct {
    TCelulaCaracter *topo;
    TCelulaCaracter *fundo;
    int tamanho;
} TPilhaCaracter;

void FPCVazia(TPilhaCaracter *PC1){
    PC1->fundo = (TCelulaCaracter*) malloc(sizeof(TCelulaCaracter));
    PC1->topo = PC1->fundo;
    PC1->fundo->prox=NULL;
    PC1->tamanho=0;
}

int VaziaPilhaCaracter(TPilhaCaracter PC){
    return(PC.fundo == PC.topo);
}

int GetTamanhoPC(TPilhaCaracter PC){
    return PC.tamanho;
}

void EmpilharPC(char c,TPilhaCaracter *PilhaC){
    TCelulaCaracter *Aux;
    Aux = (TCelulaCaracter*) malloc(sizeof(TCelulaCaracter));
    PilhaC->topo->Item=c;
    Aux->prox = PilhaC->topo;
    PilhaC->topo = Aux;
    PilhaC->tamanho++;
}

void DesempilharPC(TPilhaCaracter *PilhaC,char *c){
    if(!VaziaPilhaCaracter(*PilhaC)){
        TCelulaCaracter *Aux;
        Aux = PilhaC->topo->prox;
        PilhaC->topo = PilhaC->topo->prox;
        *c = Aux->Item;
        free(Aux);
        PilhaC->tamanho--;
    }else
        printf("\n|| ERRO || Pilha Vazia!");
}

void LerProdutoPC(TCaracteres *x, char *str)
{
    x->nome = str;
}

void ImprimirPC(TPilhaCaracter *PilhaPC){
    TPilhaCaracter P1;
    FPCVazia(&P1);
    char c;
    while(!VaziaPilhaCaracter(*PilhaPC)){
        DesempilharPC(PilhaPC,&c);
        printf("%c", c);
        EmpilharPC(c,&P1);
    }
    while(!VaziaPilhaCaracter(P1)){
        DesempilharPC(&P1,&c);
        EmpilharPC(c,PilhaPC);
    }
}

int ExpressaoAritmetica(char *str){
    TPilhaCaracter P1;
    FPCVazia(&P1);
    char c;
    int i = 0;
    while(*(str+i)!='\0'){
        if(*(str+i) == '(' || *(str+i)=='[' || *(str+i)=='{'){
            EmpilharPC(*(str+i),&P1);
        }

        if(*(str + i) == '}') {
            int n = GetTamanhoPC(P1);
            while(n!=0){
                DesempilharPC(&P1,&c);
                if(c != '{'){
                    EmpilharPC(c,&P1);
                }
                n--;
            }
        }

        if(*(str + i) == ']') {
            int n = GetTamanhoPC(P1);
            while(n!=0){
                DesempilharPC(&P1,&c);
                if(c != '['){
                    EmpilharPC(c,&P1);
                }
                n--;
            }
        }

        if(*(str + i) == ')') {
            int n = GetTamanhoPC(P1);
            while(n!=0){
                DesempilharPC(&P1,&c);
                if(c != '('){
                    EmpilharPC(c,&P1);
                }
                n--;
            }
        }
        i++;
    }
    if(VaziaPilhaCaracter(P1))
        return 1;
    else
        return 0;
}




//4
void Soma(TPilha *Pilha1,TPilha *Pilha2,TPilha *Pilha3){
    TProduto soma,x,y;
    int carry;
    carry = 0;
    while(!Vazia(*Pilha1) || !Vazia(*Pilha2)){
        Desempilhar(Pilha1,&x);
        Desempilhar(Pilha2,&y);
        soma.codigo = x.codigo + y.codigo + carry;
        if(soma.codigo >9){
            soma.codigo = soma.codigo-10;
            carry = 1;
        }else{
            carry = 0;
        }
        Empilhar(soma,Pilha3);
    }
}
